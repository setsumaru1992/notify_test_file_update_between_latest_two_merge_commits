name: notify_test_file_update_between_latest_two_merge_commits
description: "notify updated test files between latast merge commits"
branding:
  icon: "user-check"
  color: "white"
inputs:
  slack_webhook_url:
    description: "テスト更新状況を通知する先のSlackのWebhookURL"
    required: true
runs:
  using: "composite"
  steps:
    # TODO カスタムアクション使用元でもカスタムアクションのリポジトリを取得できるようにして、カスタムアクション内のパーシャルスクリプトを参照してこのファイルをすっきりさせる

    - if: ${{ !(github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true) }}
      run: echo '想定外のイベントからこのアクションが使われています。workflow_dispatchかPRのマージイベントから利用してください。' && exit 1
      shell: bash

    # 下準備
    - uses: actions/setup-node@v3
      with:
        node-version: 16
    - uses: actions/checkout@v3 # NOTE: カスタムアクションを使用するワークフローのリポジトリをチェックアウト
      with:
        fetch-depth: 50 # デフォルトだと最新しか取得せず、.gitディレクトリも作成されないので、ある程度昔のログとセットで取得するよう設定

    # コミットID取得
    - run: echo "commit1=$( git log --oneline | head -n 100 | grep 'Merge pull request' | grep -v 'Revert' | awk '{print $1}' | head -n 1 )" >> $GITHUB_OUTPUT
      id: get_commits_1
      shell: bash
    - run: echo "commit2=$( git log --oneline | head -n 100 | grep 'Merge pull request' | grep -v 'Revert'  | awk '{print $1}' | head -n 2 | tail -n 1 )" >> $GITHUB_OUTPUT
      id: get_commits_2
      shell: bash

    # 差分取得
    - run: git diff ${{steps.get_commits_2.outputs.commit2}}..${{steps.get_commits_1.outputs.commit1}} --numstat > diff_stat.txt
      shell: bash

    # 差分からテストの更新情報取得
    - name: find test updates
      run: |
        echo "exist_notice_content=$(node -e "
        
        const fs = require('fs')
        
        function readDiffFile(filename){
          const fileContent = fs.readFileSync(filename).toString()
          return fileContent.split('\n')
        }
        
        function matchSomeSuffix(str, suffixes){
          return suffixes.some((suffix) => {
            const reg = new RegExp(suffix + '$')
            return reg.test(str)
          })
        }
        
        function extractTestUpdatedDiffs(diffRowStrings){
          return diffRowStrings.map((rowString) => {
            const rowElements = rowString.split('\t')
        
            if(rowElements.length !== 3) return null
        
            const path = rowElements[2]
        
            const targetSuffixes = [
              'spec.rb', 
              'spec.js', 
              'spec.jsx',
              'spec.ts', 
              'spec.tsx',
              'story.js', 
              'story.jsx',
              'story.ts', 
              'story.tsx',
            ]
            if(!matchSomeSuffix(path, targetSuffixes)) return null
        
            return {
              path: path, 
              addRowCount: Number(rowElements[0]), 
              deleteRowCount: Number(rowElements[1]),
              addRowDiffCount: Number(rowElements[0]) - Number(rowElements[1])
            }
          }).filter((update) => update !== null)
        }
        
        function groupTestUpdates(testUpdates){
          let initialUpdateGroups = {
            addedOrGratelyUpdated: [],
            minorFixed: []
          }
          
          const updateGroups = testUpdates.reduce((updateGroups, testUpdate) => {
            const addCount = testUpdate['addRowCount']
            const deleteCount = testUpdate['deleteRowCount']
            const addDiffCount = addCount - deleteCount
        
            const onlyAdded = addCount === addDiffCount
            const greatlyUpdated = !onlyAdded && addDiffCount >= 10
        
            if( onlyAdded || greatlyUpdated){
              updateGroups['addedOrGratelyUpdated'] = updateGroups['addedOrGratelyUpdated'].concat(testUpdate)
              return updateGroups
            } else {
              updateGroups['minorFixed'] = updateGroups['minorFixed'].concat(testUpdate)
              return updateGroups
            }
          }, initialUpdateGroups)
        
          const sortByAddRowDiffCount = (testUpdateA, testUpdateB) => {
            if(testUpdateA['addRowDiffCount'] < testUpdateB['addRowDiffCount']){
              return 1
            } else {
              return -1
            }
          }
          updateGroups['addedOrGratelyUpdated'] = updateGroups['addedOrGratelyUpdated'].sort(sortByAddRowDiffCount)
          updateGroups['minorFixed'] = updateGroups['minorFixed'].sort(sortByAddRowDiffCount)
        
          return updateGroups
        }
        
        const NO_CONTENT = ''
        const NEW_LINE_CODE = '\\\n'
        function createNoticeContentJSON(updateGroups, repositoryName, branchName, mergeUser){
          let noticeContent = NO_CONTENT
          
          if(updateGroups['addedOrGratelyUpdated'].length > 0){
            noticeContent = noticeContent + ':chatworkdance: 以下のファイルが作成・追記されました :chatworkdance:' + NEW_LINE_CODE
        
            updateGroups['addedOrGratelyUpdated'].forEach((testUpdate) => {
              noticeContent = noticeContent + testUpdate['path']
              noticeContent = noticeContent + ' ' +testUpdate['addRowDiffCount'] + '行追加('
              noticeContent = noticeContent + '+' + testUpdate['addRowCount'] + ' '
              noticeContent = noticeContent + '-' + testUpdate['deleteRowCount']
              noticeContent = noticeContent + '):+1:' + NEW_LINE_CODE
            })
        
            noticeContent = noticeContent + NEW_LINE_CODE
          }
        
          if(updateGroups['minorFixed'].length > 0){
            noticeContent = noticeContent + '[以下のファイルが修正されました]' + NEW_LINE_CODE
        
            updateGroups['minorFixed'].forEach((testUpdate) => {
              noticeContent = noticeContent + testUpdate['path'] + NEW_LINE_CODE
            })
        
            noticeContent = noticeContent + NEW_LINE_CODE
          }
        
          if(noticeContent !== NO_CONTENT){
            noticeContent = repositoryName + 'のテストファイルに' + branchName + 'ブランチで' + mergeUser + 'さんが修正を加えました！' + NEW_LINE_CODE + NEW_LINE_CODE + noticeContent
          }
        
          // \u0022=二重引用符（ワンライナーをくくる二重引用符内で使用できないためユニコードで代用）
          const noticeContentJson = '{\u0022text\u0022:\u0022' + noticeContent + '\u0022}'
          fs.writeFileSync('notice_content.json', noticeContentJson)
        }
        
        function main(){
          const diffNumstatRowStrings = readDiffFile('diff_stat.txt')
          const testUpdates = extractTestUpdatedDiffs(diffNumstatRowStrings)
          if(testUpdates.length === 0) return false
        
          const updateGroups = groupTestUpdates(testUpdates)
          
          const mergeUser = '${{ github.event.pull_request.merged_by.login }}' || '(ユーザ名)';
          const branchName = '${{ github.head_ref }}' || '(ブランチ名)';
          createNoticeContentJSON(
            updateGroups, 
            '${{ github.repository }}', 
            branchName, 
            mergeUser
          )
          return true
        }
        const exist_notice_content = main()
        console.log(exist_notice_content)
        
        // "true"/"false"を返却
        " )" >> $GITHUB_OUTPUT
      shell: bash
      id: find_test_updates

    - uses: slackapi/slack-github-action@v1.23.0
      if: ${{ steps.find_test_updates.outputs.exist_notice_content == 'true' }} # TODO: 通知の必要がない場合実行しない
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook_url }}
      with:
        payload-file-path: "./notice_content.json"
